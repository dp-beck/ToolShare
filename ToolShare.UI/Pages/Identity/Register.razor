@page "/register"
@layout EmptyLayout
@using System.ComponentModel.DataAnnotations
@using System.Text.RegularExpressions
@using ToolShare.UI.Identity
@using ToolShare.UI.Identity.Dtos
@attribute [AllowAnonymous]
@inject IAccountManagement Acct

<PageTitle>Tool Share - Register</PageTitle>

<MudText Typo="Typo.h2" Align="Align.Center">Register</MudText>

<AuthorizeView>
    <Authorized>
        <MudAlert Severity="Severity.Info">You're already logged in as @context.User.Identity?.Name.</MudAlert>
    </Authorized>
    <NotAuthorized>
        @if (success)
        {
            <MudAlert Severity="Severity.Success">
                You successfully registered. Now you can <MudLink href="login">login</MudLink>.
            </MudAlert>
        }
        else
        {
            <MudGrid>
                <MudItem xs="12" sm="7">
                    <MudPaper Class="pa-4">
                        <MudForm @ref="form" @bind-IsValid="@validForm" @bind-Errors="@errors">
                            <MudTextField @bind-Value="registrationInfo.UserName" T="string" Label="Username" Required="true" RequiredError="User name is required!"/>
                            <MudTextField @bind-Value="registrationInfo.Email" T="string" Label="Email" Required="true" RequiredError="Email is required!"
                                          Validation="@(new EmailAddressAttribute() { ErrorMessage = "The email address is invalid" })"/>
                            <MudTextField @bind-Value="registrationInfo.FirstName" T="string" Label="First Name" />
                            <MudTextField @bind-Value="registrationInfo.LastName" T="string" Label="Last Name" />
                            <MudTextField @bind-Value="registrationInfo.AboutMe" T="string" Label="About Me" Variant="Variant.Text" Lines="5"/>
                            <MudTextField @bind-Value="registrationInfo.Password" T="string" Label="Password" HelperText="Choose a strong password" @ref="pwField1"
                                          InputType="InputType.Password"
                                          Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))" Required="true"
                                          RequiredError="Password is required!"/>
                            <MudTextField T="string"
                                          Label="Password" HelperText="Repeat the password" InputType="InputType.Password"
                                          Validation="@(new Func<string, string>(PasswordMatch!))"
                                          Required="true"
                                          RequiredError="Please confirm password!"/>
                            <MudButton @onclick="OpenWidget"
                                       Class="mr-auto"
                                       Variant="Variant.Filled"
                                       Color="Color.Primary"
                                       StartIcon="@Icons.Material.Filled.CloudUpload">
                                Upload Profile Photo
                            </MudButton>
                            <MudText Typo="Typo.caption">@PhotoUploadMessage</MudText>
                            <div class="d-flex align-center justify-space-between">
                                <MudButton OnClick="async () => await DoRegisterAsync()" 
                                           Variant="Variant.Filled" 
                                           Color="Color.Primary" 
                                           Disabled="@(!validForm)" 
                                           Class="ml-auto">Register</MudButton>
                            </div>
                        </MudForm>
                    </MudPaper>
                </MudItem>
                <MudItem xs="12" sm="5">
                    <MudPaper Class="pa-4 mud-height-full">
                        <MudText Typo="Typo.subtitle2">@($"Errors ({errors.Length})")</MudText>
                        @foreach (var error in errors)
                        {
                            <MudText Color="@Color.Error">@error</MudText>
                        }
                    </MudPaper>
                </MudItem>
            </MudGrid>
        }
    </NotAuthorized>
</AuthorizeView>

@code {
    private MudForm? form;
    string[] errors = { };
    private bool success;
    private bool validForm;
    MudTextField<string>? pwField1;
    private string PhotoUploadMessage { get; set; } = string.Empty;
    private string SecureUrl { get; set; } = string.Empty;
    private const string Transformation = "w_1000,c_fill,ar_1:1,g_auto,r_max,bo_5px_solid_red,b_rgb:262c35";
    private RegistrationInfoDto registrationInfo = new ()
    {
        UserName = string.Empty,
        Email = string.Empty,
        FirstName = string.Empty,
        LastName = string.Empty,
        AboutMe = string.Empty,
        Password = string.Empty,
    };
    
    [Inject] public required IJSRuntime Js { get; set; }
    
    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Password is required!";
            yield break;
        }
        if (pw.Length < 8)
            yield return "Password must be at least of length 8";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Password must contain at least one capital letter";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Password must contain at least one lowercase letter";
        if (!Regex.IsMatch(pw, @"[0-9]"))
            yield return "Password must contain at least one digit";
    }
    
    private string? PasswordMatch(string arg)
    {
        if (pwField1?.Value != arg)
            return "Passwords don't match";
        return null;
    }
    
    public async Task DoRegisterAsync()
    {
        success =  false;
        errors = [];

        if (registrationInfo.ProfilePhotoUrl is null)
        {
            registrationInfo.ProfilePhotoUrl = "https://res.cloudinary.com/dzsqoueki/image/upload/w_1000,c_fill,ar_1:1,g_auto,r_max,bo_5px_solid_red,b_rgb:262c35/v1731154587/blank-profile-picture-973460_1280_pxrhwm.png";
        }
        else
        {
            registrationInfo.ProfilePhotoUrl = TransformImageUrl(SecureUrl, Transformation);
        }
        
        var result = await Acct.RegisterAsync(registrationInfo);

        if (result.Succeeded)
        {
            success = true;
            registrationInfo.Email =
                registrationInfo.Password =
                    registrationInfo.UserName =
                        registrationInfo.FirstName =
                            registrationInfo.LastName =
                                registrationInfo.AboutMe = String.Empty;
            registrationInfo.ProfilePhotoUrl = null;
        }
        else
        {
            errors = result.ErrorList;
        }
    }
    
    private async Task OpenWidget()
    {
        SecureUrl = await Js.InvokeAsync<string>("openWidget");
        if (!string.IsNullOrEmpty(SecureUrl))
        {
            PhotoUploadMessage = "Photo successfully uploaded!";
        }
    }
    
    private string TransformImageUrl(string url, string transformation)
    {
        string[] parts = url.Split(["/upload/"], StringSplitOptions.None);
        if (parts.Length != 2)
        {
            throw new ArgumentException("Invalid Cloudinary URL");
        }
        return parts[0] + "/upload/" + transformation + "/" + parts[1];
    }
}